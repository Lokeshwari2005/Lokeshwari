#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* left;
    struct Node* right;
} Node;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (!newNode) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

Node* search(Node* root, int target) {   
    if (root == NULL || root->data == target) {
        return root;
    } 
    Node* foundNode = search(root->left, target);
    if (foundNode == NULL) {
        foundNode = search(root->right, target);
    }
    
    return foundNode;
}

void freeTree(Node* root) {
    if (root != NULL) {
        freeTree(root->left);
        freeTree(root->right);
        free(root);
    }
}

int main() {
    Node* root = createNode(4);
    root->left = createNode(2);
    root->right = createNode(6);
    root->left->left = createNode(1);
    root->left->right = createNode(3);
    root->right->left = createNode(5);
    root->right->right = createNode(7);

    int target = 5;
    Node* result = search(root, target);

    if (result != NULL) {
        printf("Node with value %d found.\n", target);
    } else {
        printf("Node with value %d not found.\n", target);
    }

    freeTree(root);
    return 0;
}
