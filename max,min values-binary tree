#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

typedef struct Node {
    int data;
    struct Node* left;
    struct Node* right;
} Node;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (!newNode) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

int findMin(Node* root) {
    if (root == NULL) {
        return INT_MAX; 
    }
    int leftMin = findMin(root->left);
    int rightMin = findMin(root->right);
  
    return (root->data < leftMin ? (root->data < rightMin ? root->data : rightMin) : (leftMin < rightMin ? leftMin : rightMin));
}

int findMax(Node* root) {
    if (root == NULL) {
        return INT_MIN; 
    }
    int leftMax = findMax(root->left);
    int rightMax = findMax(root->right);
    return (root->data > leftMax ? (root->data > rightMax ? root->data : rightMax) : (leftMax > rightMax ? leftMax : rightMax));
}
void freeTree(Node* root) {
    if (root != NULL) {
        freeTree(root->left);
        freeTree(root->right);
        free(root);
    }
}

int main() {
    Node* root = createNode(4);
    root->left = createNode(2);
    root->right = createNode(6);
    root->left->left = createNode(1);
    root->left->right = createNode(3);
    root->right->left = createNode(5);
    root->right->right = createNode(7);

    int minValue = findMin(root);
    int maxValue = findMax(root);

    printf("Minimum value in the binary tree: %d\n", minValue);
    printf("Maximum value in the binary tree: %d\n", maxValue);
    freeTree(root);
    return 0;
}
