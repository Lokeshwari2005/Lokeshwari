#include <stdio.h>
#include <stdlib.h>
typedef struct Node {
    int data;
    struct Node* left;
    struct Node* right;
} Node;
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (!newNode) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}
typedef struct Result {
    int diameter;
    int height;
} Result;

Result calculateDiameter(Node* root) {
    Result res = {0, -1};
    if (root == NULL) {
        return res; 
    }
  
    Result leftResult = calculateDiameter(root->left);
    Result rightResult = calculateDiameter(root->right);
    res.height = (leftResult.height > rightResult.height ? leftResult.height : rightResult.height) + 1;
    res.diameter = (leftResult.diameter > rightResult.diameter ? leftResult.diameter : rightResult.diameter);
    res.diameter = (res.diameter > leftResult.height + rightResult.height + 2 ? res.diameter : leftResult.height + rightResult.height + 2);
    
    return res;
}
void freeTree(Node* root) {
    if (root != NULL) {
        freeTree(root->left);
        freeTree(root->right);
        free(root);
    }
}

int main() {
   
    Node* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);
    root->right->right = createNode(6);
    root->right->right->right = createNode(7);
    Result result = calculateDiameter(root);
    printf("Diameter of the binary tree: %d\n", result.diameter);
    freeTree(root);
    return 0;
}
