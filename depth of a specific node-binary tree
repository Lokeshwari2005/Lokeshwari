#include <stdio.h>
#include <stdlib.h>
typedef struct Node {
    int data;
    struct Node* left;
    struct Node* right;
} Node;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (!newNode) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

int findDepth(Node* root, int target, int depth) {
    if (root == NULL) {
        return -1; // Node not found
    }
    
    if (root->data == target) {
        return depth;
    }
    
    int leftDepth = findDepth(root->left, target, depth + 1);
    if (leftDepth != -1) {
        return leftDepth; // If found in left subtree, return the depth
    }
    
    return findDepth(root->right, target, depth + 1);
}

void freeTree(Node* root) {
    if (root != NULL) {
        freeTree(root->left);
        freeTree(root->right);
        free(root);
    }
}

int main() {
   
    Node* root = createNode(4);
    root->left = createNode(2);
    root->right = createNode(6);
    root->left->left = createNode(1);
    root->left->right = createNode(3);
    root->right->left = createNode(5);
    root->right->right = createNode(7);
    int target = 5;
    int depth = findDepth(root, target, 0);

    if (depth != -1) {
        printf("Depth of node with value %d: %d\n", target, depth);
    } else {
        printf("Node with value %d not found in the tree.\n", target);
    }
    freeTree(root);
   return 0;
}
